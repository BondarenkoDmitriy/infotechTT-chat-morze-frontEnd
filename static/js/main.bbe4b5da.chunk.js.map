{"version":3,"sources":["utils/socketSetup.ts","utils/generateUniqueId.ts","type/roles.ts","Components/Message/Message.tsx","Controls/Button/Button.tsx","Controls/Input/Input.tsx","Components/InputsList/InputsList.tsx","Components/ChatMessenger/ChatMessenger.tsx","Components/Authorization/Authorization.tsx","App.tsx","index.tsx"],"names":["socket","io","uid","ShortUniqueId","generateUniqueId","length","randomUUID","UserRole","Message","message","username","role","className","classNames","message__sender","from","message__receiver","message__newby","text","icon","faEye","title","onClick","inputMessage","emit","messageId","id","Button","memo","children","classes","type","Input","placeholder","onChange","value","required","InputsList","useState","messageInput","setMessageInput","error","setError","recipientUsername","setRecipientUsername","e","target","inputValue","hasError","split","forEach","char","trim","toUser","fromUser","ChatMessenger","messages","setMessages","useEffect","callback","console","log","prevMessages","on","data","onPrivateMessage","prevPrivateMessages","onUpdateMessage","map","onDisconnect","disconnect","Fragment","Authorization","onLogin","setUsername","User","setRole","Admin","Newby","authorizeSocket","App","isAuth","setIsAuth","passingName","passingRole","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbe4b5da.chunk.js","sourcesContent":["/* eslint-disable */\nimport { io, Socket } from 'socket.io-client';\nimport { UserRole } from '../type/roles';\n\nconst socket: Socket = io('http://localhost:5000');\n\nexport default socket;\n\n// Функция для авторизации на сервере\nexport const authorizeSocket = (username: string, role: UserRole) => {\n  socket.emit('authorize', { username, role });\n};\n\n// Функция для отправки сообщения чата\nexport const sendChatMessage = (from: string, text: string) => {\n  socket.emit('chat message', { from, text });\n};\n\n// Функция для отправки личного сообщения\nexport const sendPrivateMessage = (toUser: string, fromUser: string, text: string) => {\n  socket.emit('privateMessage', { toUser, fromUser, text });\n};\n\n// Функция для обработки события нового сообщения в чате\nexport const onChatMessage = (callback: (message: { from: string; text: string }) => void) => {\n  socket.on('chat message', (message: { from: string; text: string }) => {\n    callback(message);\n  });\n};\n\nexport const onUpdateMessage = (callback: (message: { messageId: string, text: string }) => void) => {\n  socket.on('updateMessage', (message: { messageId: string; text: string }) => {\n    callback(message);\n  });\n};\n\n// Функция для обработки события нового личного сообщения\nexport const onPrivateMessage = (callback: (data: { fromUser: string; toUser:string; message: string }) => void) => {\n  socket.on('privateMessage', (data:  { fromUser: string; toUser:string; message: string }) => {\n    callback(data);\n  });\n};\n\n//если пользователь не найден\nexport const onUserNotFound = (callback: (message: { from: string; text: string }) => void) => {\n    socket.on('userNotFound', (message: { from: string; text: string }) => {\n        callback(message);\n    });\n};\n\n// Обработка события дисконнекта\nexport const onDisconnect = (callback: () => void) => {\n    socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      callback();\n    });\n }","import ShortUniqueId from 'short-unique-id';\n\nconst uid = new ShortUniqueId();\n\nexport function generateUniqueId(length = 10): string {\n  return uid.randomUUID(length);\n}\n","// eslint-disable-next-line no-shadow\nexport enum UserRole {\n  User = 'user',\n  Admin = 'admin',\n  Newby = 'newby',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye } from '@fortawesome/free-solid-svg-icons';\nimport { IMessage } from '../../type/message';\nimport { UserRole } from '../../type/roles';\nimport socket from '../../utils/socketSetup';\nimport './message.scss';\n\ninterface Props {\n  message: IMessage;\n  username: string;\n  role: UserRole;\n}\n\nexport const Message: React.FC<Props> = ({ message, username, role }) => {\n  const handleDecoderMessage = (inputMessage: IMessage) => {\n    socket.emit('decoderMorseMessage', { from: username, text: inputMessage.text, messageId: inputMessage.id });\n  };\n\n  return (\n    <div\n      className={classNames('message', {\n        message__sender: message.from === username,\n        message__receiver: message.from !== username,\n        message__newby: role === 'newby',\n      })}\n    >\n      {message.from}\n      :\n      <br />\n      {' '}\n      {message.text}\n      {role === 'newby' && (\n        <span className=\"message__eye-icon\">\n          <FontAwesomeIcon\n            icon={faEye}\n            title=\"Показать текст\"\n            onClick={() => {\n              handleDecoderMessage(message);\n            }}\n          />\n        </span>\n      )}\n    </div>\n  );\n};\n","import React, { FC, MouseEventHandler, memo } from 'react';\n\ntype ButtonType = (MouseEventHandler<HTMLButtonElement>);\n\ninterface Props {\n  classes?: string;\n  children?: unknown;\n  onClick?: ButtonType;\n\n}\n\nexport const Button: FC<Props> = memo(({ children, classes, onClick }) => {\n  return (\n    <button\n      type=\"button\"\n      className={`${classes}`}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n});\n","import React, { ChangeEvent, FC, memo } from 'react';\n\ninterface Props {\n  classes?: string;\n  placeholder: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value: string;\n  required?: boolean;\n}\n\nexport const Input: FC<Props> = memo(({\n  placeholder,\n  classes,\n  onChange,\n  value,\n  required,\n}) => {\n  return (\n    <input\n      type=\"text\"\n      className={`${classes}`}\n      onChange={onChange}\n      placeholder={placeholder}\n      value={value}\n      required={required}\n    />\n  );\n});\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { FC, useState } from 'react';\nimport classNames from 'classnames';\nimport socket from '../../utils/socketSetup';\nimport { Button } from '../../Controls/Button/Button';\nimport './inputsList.scss';\nimport { Input } from '../../Controls/Input/Input';\n\ninterface Props {\n  username: string;\n}\n\nexport const InputsList: FC<Props> = ({ username }) => {\n  const [messageInput, setMessageInput] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [recipientUsername, setRecipientUsername] = useState<string>('');\n\n  const handleSendMessage = () => {\n    if (messageInput.trim() !== '') {\n      socket.emit('privateMessage', { toUser: recipientUsername, fromUser: username, text: messageInput.trim() });\n    }\n\n    setMessageInput('');\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    let hasError = false;\n\n    inputValue.split('').forEach((char) => {\n      if (char !== '.' && char !== '-' && char !== ' ') {\n        setError('Please enter Morse code characters only (. or -)');\n        hasError = true;\n      }\n    });\n\n    if (hasError) {\n      return;\n    }\n\n    setError(null);\n    setMessageInput(inputValue);\n  };\n\n  return (\n    <div className=\"inputs\">\n      <label>\n        Welcome:\n        {username}\n      </label>\n      <Input\n        placeholder=\"Recipient Name\"\n        value={recipientUsername ?? ''}\n        onChange={(e) => setRecipientUsername(e.target.value)}\n        classes=\"inputs__field\"\n      />\n      <Input\n        placeholder=\"Type your message...\"\n        value={messageInput}\n        onChange={handleInputChange}\n        classes={classNames('inputs__field', { 'inputs__field--error': error })}\n      />\n      {error && <div className=\"error-message\">{error}</div>}\n      <Button\n        onClick={handleSendMessage}\n        classes=\"inputs__field inputs__field--button\"\n      >\n        Send\n      </Button>\n    </div>\n  );\n};\n","/* eslint-disable object-shorthand */\n/* eslint-disable no-console */\n\nimport React, { useState, useEffect } from 'react';\nimport './chatMessenger.scss';\nimport { io } from 'socket.io-client';\nimport { UserRole } from '../../type/roles';\nimport {\n  onChatMessage, onDisconnect, onPrivateMessage, onUpdateMessage,\n} from '../../utils/socketSetup';\nimport { IMessage } from '../../type/message';\nimport { generateUniqueId } from '../../utils/generateUniqueId';\nimport { Message } from '../Message/Message';\nimport { InputsList } from '../InputsList/InputsList';\n\nconst socket = io('http://localhost:5000');\n\ninterface Props {\n  username: string;\n  role: UserRole;\n}\n\nexport const ChatMessenger: React.FC<Props> = ({ username, role }) => {\n  const [messages, setMessages] = useState<IMessage[]>([]);\n\n  useEffect(() => {\n    onChatMessage((message) => {\n      console.log('New chat message received:', message);\n\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { from: message.from, text: message.text, id: generateUniqueId() },\n      ]);\n    });\n\n    onPrivateMessage((data) => {\n      console.log('New private message received:', data);\n      setMessages((prevPrivateMessages) => [\n        ...prevPrivateMessages,\n        { from: data.fromUser, text: data.message, id: generateUniqueId() },\n      ]);\n    });\n\n    onUpdateMessage((data) => {\n      console.log('onUpdateMessage', data);\n\n      setMessages((prevMessages) => prevMessages.map((message) => (\n        message.id === data.messageId ? { ...message, text: data.text } : message)));\n    });\n\n    onDisconnect(() => {\n      console.log('Disconnected from server', socket.id);\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  return (\n    <div>\n      <div className=\"chat__container\">\n        <div className=\"chat__body\" id=\"message-container\">\n          {messages.map((message) => (\n            <React.Fragment key={message.from}>\n              <Message message={message} role={role} username={username} />\n            </React.Fragment>\n          ))}\n        </div>\n        <InputsList username={username} />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport { UserRole } from '../../type/roles';\nimport './authorization.scss';\nimport { authorizeSocket } from '../../utils/socketSetup';\nimport { Button } from '../../Controls/Button/Button';\nimport { Input } from '../../Controls/Input/Input';\n\ninterface Porps {\n  onLogin: (username: string, role: UserRole) => void;\n}\n\nexport const Authorization: React.FC<Porps> = ({ onLogin }) => {\n  const [username, setUsername] = useState('');\n  const [role, setRole] = useState<UserRole>(UserRole.User);\n\n  const handleLogin = () => {\n    if (username.trim() !== '') {\n      onLogin(username, role);\n      authorizeSocket(username, role);\n    }\n  };\n\n  return (\n    <div className=\"authorization\">\n      <Input\n        placeholder=\"Your Name\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        classes=\"authorization__field authorization__field__name\"\n      />\n      <select\n        value={role}\n        onChange={(e) => setRole(e.target.value as UserRole)}\n        className=\"authorization__field\"\n      >\n        <option value={UserRole.User}>User</option>\n        <option value={UserRole.Admin}>Admin</option>\n        <option value={UserRole.Newby}>Newby</option>\n      </select>\n      <Button\n        onClick={handleLogin}\n        classes=\"authorization__field\"\n      >\n        Login\n      </Button>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { ChatMessenger } from './Components/ChatMessenger/ChatMessenger';\nimport { Authorization } from './Components/Authorization/Authorization';\nimport { UserRole } from './type/roles';\n\nexport const App: React.FC = () => {\n  const [username, setUsername] = useState('');\n  const [role, setRole] = useState<UserRole>(UserRole.User);\n  const [isAuth, setIsAuth] = useState(false);\n\n  const handleLogin = (passingName: string, passingRole: UserRole) => {\n    setUsername(passingName);\n    setRole(passingRole);\n    setIsAuth(true);\n  };\n\n  return (\n    <div>\n      {isAuth && role ? (\n        <ChatMessenger username={username} role={role} />\n      ) : (\n        <Authorization onLogin={handleLogin} />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}